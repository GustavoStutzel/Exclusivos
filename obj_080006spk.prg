Define Class obj_entrada As Custom
   Procedure metodo_usuario
      Lparam xmetodo, xobjeto ,xnome_obj
      Do Case
         Case Upper(xmetodo) == 'USR_INIT'
            WAIT windows "OBJ-SS" NOWAIT
            
           	* 16/12/2014 - Leandro Rocha (SS): Adiciona botão para exportar os pedidos
           	Thisformset.lx_FORM1.AddObject('btn_Exportar_Pedidos', 'cls_botao_exportar')
         Otherwise
            Return .T.
      Endcase
   Endproc
ENDDEFINE 

DEFINE CLASS cls_botao_exportar AS botao
	Caption = "\<Exportar Pedidos"
	Name = "btn_Exportar_Pedidos"
    Visible = .T.
    Enabled = .T.
    Height = 22
    Left = 665
    Top = 59
    Width = 100
    p_manter_direita = .T.
    p_manter_esquerda = .F.
    p_manter_cima = .T.

	PROCEDURE Refresh
		this.Enabled = IIF(thisformset.p_tool_status == 'P' AND THISFORMSET.P_ACESSO_PESQUISAR, .T., .F.)
	ENDPROC
	
	PROCEDURE Click	
		strDiretório = GETDIR("c:", "Diretório", "EXPORTAR PEDIDO")
		
		strPedidosJaExportados = ""
		
		IF f_vazio(strDiretório)
			RETURN .f.
		ENDIF
		
		TEXT TO strSql TEXTMERGE noshow
			SELECT	CODIGO_BARRAS_LICENCIADO = PRODUTOS_BARRA_LICENCIADOS.CODIGO_BARRA,
					VENDAS_PRODUTO.PRODUTO,
					VENDAS_PRODUTO.COR_PRODUTO,
					TAMANHO = W_SS_GRADE_PRODUTO.GRADE,
					PEDIDO_EXPORTADO_FORNECEDOR = ISNULL(VENDAS.PEDIDO_EXPORTADO_FORNECEDOR, 0),
					LINHA_ARQUIVO = -- CGC do Cliente N(14) 
									LEFT(LTRIM(RTRIM(REPLACE(REPLACE(REPLACE(CLIENTES_ATACADO.CGC_CPF, '.', ''), '-', ''), '/', ''))) + REPLICATE(' ', 14), 14) +
									-- Número da Ordem de Compra do Cliente C(10)
									LEFT(LTRIM(RTRIM(VENDAS.PEDIDO)) + REPLICATE(' ', 14), 10) +
									-- BRANCO N(2)
									REPLICATE(' ', 2) +
									-- Número do Plano (Opcional) C(2)
									REPLICATE(' ', 6) +
									-- Data de Emissão da OC, no formato AAAAMMDD D(8)
									CONVERT(VARCHAR(8), VENDAS.EMISSAO, 112) +
									-- V=Venda, B= Beneficiamento, C=Cancelamento, A=Alteração C(1)
									'V' +
									-- Data desejada de entrega, no formato AAAAMMDD D(8)
									CONVERT(VARCHAR(8), VENDAS_PRODUTO.ENTREGA, 112) + 
									-- BRANCO C(2)
									REPLICATE(' ', 2) +
									-- Ocorrência da Ordem de Compra C(4)	
									RIGHT(REPLICATE('0', 4) + LTRIM(RTRIM(CONVERT(VARCHAR(20), ROW_NUMBER() OVER(PARTITION BY VENDAS.PEDIDO ORDER BY VENDAS.PEDIDO, VENDAS_PRODUTO.PRODUTO, VENDAS_PRODUTO.COR_PRODUTO)))), 4) +
									-- BRANCO C(15)
									REPLICATE(' ', 15) + 
									-- Quantidade Encomendada / Produto C(9) 3 Decimais
									RIGHT(REPLACE(REPLICATE('0', 9)  + CONVERT(VARCHAR(9), CONVERT(NUMERIC(9, 3), 
										CASE W_SS_GRADE_PRODUTO.TAMANHO 
										WHEN 1 THEN ISNULL(VENDAS_PRODUTO.VE1, 0) WHEN 2 THEN ISNULL(VENDAS_PRODUTO.VE2, 0) WHEN 3 THEN ISNULL(VENDAS_PRODUTO.VE3, 0)
										WHEN 4 THEN ISNULL(VENDAS_PRODUTO.VE4, 0) WHEN 5 THEN ISNULL(VENDAS_PRODUTO.VE5, 0) WHEN 6 THEN ISNULL(VENDAS_PRODUTO.VE6, 0)
										WHEN 7 THEN ISNULL(VENDAS_PRODUTO.VE7, 0) WHEN 8 THEN ISNULL(VENDAS_PRODUTO.VE8, 0) WHEN 9 THEN ISNULL(VENDAS_PRODUTO.VE9, 0) 
										WHEN 10 THEN ISNULL(VENDAS_PRODUTO.VE10, 0) WHEN 11 THEN ISNULL(VENDAS_PRODUTO.VE11, 0) WHEN 12 THEN ISNULL(VENDAS_PRODUTO.VE12, 0) 
										WHEN 13 THEN ISNULL(VENDAS_PRODUTO.VE13, 0) WHEN 14 THEN ISNULL(VENDAS_PRODUTO.VE14, 0) WHEN 15 THEN ISNULL(VENDAS_PRODUTO.VE15, 0) 
										WHEN 16 THEN ISNULL(VENDAS_PRODUTO.VE16, 0) WHEN 17 THEN ISNULL(VENDAS_PRODUTO.VE17, 0) WHEN 18 THEN ISNULL(VENDAS_PRODUTO.VE18, 0) 
										WHEN 19 THEN ISNULL(VENDAS_PRODUTO.VE19, 0) WHEN 20 THEN ISNULL(VENDAS_PRODUTO.VE20, 0) WHEN 21 THEN ISNULL(VENDAS_PRODUTO.VE21, 0) 
										WHEN 22 THEN ISNULL(VENDAS_PRODUTO.VE22, 0) WHEN 23 THEN ISNULL(VENDAS_PRODUTO.VE23, 0) WHEN 24 THEN ISNULL(VENDAS_PRODUTO.VE24, 0) 
										WHEN 25 THEN ISNULL(VENDAS_PRODUTO.VE25, 0) WHEN 26 THEN ISNULL(VENDAS_PRODUTO.VE26, 0) WHEN 27 THEN ISNULL(VENDAS_PRODUTO.VE27, 0) 
										WHEN 28 THEN ISNULL(VENDAS_PRODUTO.VE28, 0) WHEN 29 THEN ISNULL(VENDAS_PRODUTO.VE29, 0) WHEN 30 THEN ISNULL(VENDAS_PRODUTO.VE30, 0) 
										WHEN 31 THEN ISNULL(VENDAS_PRODUTO.VE31, 0) WHEN 32 THEN ISNULL(VENDAS_PRODUTO.VE32, 0) WHEN 33 THEN ISNULL(VENDAS_PRODUTO.VE33, 0) 
										WHEN 34 THEN ISNULL(VENDAS_PRODUTO.VE34, 0) WHEN 35 THEN ISNULL(VENDAS_PRODUTO.VE35, 0) WHEN 36 THEN ISNULL(VENDAS_PRODUTO.VE36, 0) 
										WHEN 37 THEN ISNULL(VENDAS_PRODUTO.VE37, 0) WHEN 38 THEN ISNULL(VENDAS_PRODUTO.VE38, 0) WHEN 39 THEN ISNULL(VENDAS_PRODUTO.VE39, 0) 
										WHEN 40 THEN ISNULL(VENDAS_PRODUTO.VE40, 0) WHEN 41 THEN ISNULL(VENDAS_PRODUTO.VE41, 0) WHEN 42 THEN ISNULL(VENDAS_PRODUTO.VE42, 0) 
										WHEN 43 THEN ISNULL(VENDAS_PRODUTO.VE43, 0) WHEN 44 THEN ISNULL(VENDAS_PRODUTO.VE44, 0) WHEN 45 THEN ISNULL(VENDAS_PRODUTO.VE45, 0) 
										WHEN 46 THEN ISNULL(VENDAS_PRODUTO.VE46, 0) WHEN 47 THEN ISNULL(VENDAS_PRODUTO.VE47, 0) WHEN 48 THEN ISNULL(VENDAS_PRODUTO.VE48, 0) 
									END)), '.', ''), 9) + 
									-- Sigla de Unidade de medida C(3) (Colocado PR a pedido do Silvio.)
									LEFT(LTRIM(RTRIM('PR')) + REPLICATE(' ', 3), 3) +
									-- EXTRANUMERICO N(3)
									REPLICATE(' ', 3) + 
									-- Valor Unitário do Produto C(14) 2 Decimais
									RIGHT(REPLACE(REPLICATE('0', 14)  + CONVERT(VARCHAR(14), CONVERT(NUMERIC(14, 2), VENDAS_PRODUTO.PRECO1)), '.', ''), 14) + 
									-- BRANCO c(3) 
									REPLICATE(' ', 3) + 
									-- Condição de Pagamento C(15)
									LEFT(	CASE WHEN COND_ATAC_PGTOS.NUMERO_PARCELAS >= 0 THEN LTRIM(RTRIM(CONVERT(VARCHAR(9), COND_ATAC_PGTOS.PARCELA_1))) END + 
											CASE WHEN COND_ATAC_PGTOS.NUMERO_PARCELAS >= 2 THEN '/' + LTRIM(RTRIM(CONVERT(VARCHAR(9), COND_ATAC_PGTOS.PARCELA_2))) ELSE '' END +
											CASE WHEN COND_ATAC_PGTOS.NUMERO_PARCELAS >= 3 THEN '/' + LTRIM(RTRIM(CONVERT(VARCHAR(9), COND_ATAC_PGTOS.PARCELA_3))) ELSE '' END +
											CASE WHEN COND_ATAC_PGTOS.NUMERO_PARCELAS >= 4 THEN '/' + LTRIM(RTRIM(CONVERT(VARCHAR(9), COND_ATAC_PGTOS.PARCELA_4))) ELSE '' END +
											CASE WHEN COND_ATAC_PGTOS.NUMERO_PARCELAS >= 5 THEN '/' + LTRIM(RTRIM(CONVERT(VARCHAR(9), COND_ATAC_PGTOS.PARCELA_5))) ELSE '' END +
											CASE WHEN COND_ATAC_PGTOS.NUMERO_PARCELAS >= 6 THEN '/' + LTRIM(RTRIM(CONVERT(VARCHAR(9), COND_ATAC_PGTOS.PARCELA_6))) ELSE '' END +
											CASE WHEN COND_ATAC_PGTOS.NUMERO_PARCELAS >= 7 THEN '/' + LTRIM(RTRIM(CONVERT(VARCHAR(9), COND_ATAC_PGTOS.PARCELA_7))) ELSE '' END +
											CASE WHEN COND_ATAC_PGTOS.NUMERO_PARCELAS >= 8 THEN '/' + LTRIM(RTRIM(CONVERT(VARCHAR(9), COND_ATAC_PGTOS.PARCELA_8))) ELSE '' END +
											CASE WHEN COND_ATAC_PGTOS.NUMERO_PARCELAS >= 9 THEN '/' + LTRIM(RTRIM(CONVERT(VARCHAR(9), COND_ATAC_PGTOS.PARCELA_9))) ELSE '' END +
											CASE WHEN COND_ATAC_PGTOS.NUMERO_PARCELAS >= 10 THEN '/' + LTRIM(RTRIM(CONVERT(VARCHAR(9), COND_ATAC_PGTOS.PARCELA_10))) ELSE '' END +
											CASE WHEN COND_ATAC_PGTOS.NUMERO_PARCELAS >= 11 THEN '/' + LTRIM(RTRIM(CONVERT(VARCHAR(9), COND_ATAC_PGTOS.PARCELA_11))) ELSE '' END +
											CASE WHEN COND_ATAC_PGTOS.NUMERO_PARCELAS >= 12 THEN '/' + LTRIM(RTRIM(CONVERT(VARCHAR(9), COND_ATAC_PGTOS.PARCELA_12))) ELSE '' END  +
											'DD' + REPLICATE(' ', 15), 15) + 
										-- BRANCO C(1)
										REPLICATE(' ', 1) +
										-- COMPLEMENTO (item do pedido) C(20) 
										LEFT('IT:' + RIGHT(REPLICATE('0', 5) + LTRIM(RTRIM(CONVERT(VARCHAR(20),ITENS.NUMERO_ITEM)))  , 5) + REPLICATE(' ', 20), 20) +
										-- Código do produto do fornecedor C(40)
										LEFT(LTRIM(RTRIM(ISNULL(PRODUTOS_BARRA_LICENCIADOS.CODIGO_BARRA, ''))) + '/' + LTRIM(RTRIM(PRODUTOS_BARRA_LICENCIADOS.TAMANHO)) + REPLICATE(' ', 40), 40) +
										-- Mensagem para o fornecedor C(20)
										REPLICATE(' ', 20) +
										-- CNPJ do Fornecedor C(14)
										LEFT(LTRIM(RTRIM(REPLACE(REPLACE(REPLACE(FILIAIS.CGC_CPF, '.', ''), '-', ''), '/', ''))) + REPLICATE(' ', 14), 14) +
										-- BRANCO C(44)
										REPLICATE(' ', 44) +
										-- BRANCO C(3)
										REPLICATE(' ', 3) +
										-- Descrição do Produto C(60)
										LEFT(LTRIM(RTRIM(ISNULL(PRODUTOS.DESC_PRODUTO, ''))) + REPLICATE(' ', 60), 60) +
										-- BRANCO C(15)
										REPLICATE(' ', 15) +
										-- EXTRANUMERICO N(3)
										'000' + 
										-- Código Representante N(6)
										--'000000' +
										CASE WHEN LTRIM(RTRIM(PRODUTOS.FABRICANTE))='TURIN' THEN
											ISNULL(PROP_REPRESENTANTES.VALOR_PROPRIEDADE,'')
										ELSE
											REPRESENTANTES.CLIFOR
										END +
										-- Observação do Pedido C(180)
										LEFT(LTRIm(RTRIM(CONVERT(VARCHAR(20), ISNULL(VENDAS.OBS, '')))) + REPLICATE(' ', 180), 180) +
										-- Observação do Item C(120)
										LEFT(LTRIm(RTRIM(CONVERT(VARCHAR(20), ISNULL(VENDAS_PRODUTO.DESC_VENDA_CLIENTE, '')))) + REPLICATE(' ', 120), 120)
				FROM VENDAS (NOLOCK)
				INNER JOIN VENDAS_PRODUTO (NOLOCK)
					ON VENDAS_PRODUTO.PEDIDO = VENDAS.PEDIDO
				INNER JOIN (SELECT PEDIDO, PRODUTO, COR_PRODUTO, ROW_NUMBER() OVER(PARTITION BY PEDIDO ORDER BY PEDIDO, PRODUTO, COR_PRODUTO) AS NUMERO_ITEM
							FROM VENDAS_PRODUTO ITN
							GROUP BY PEDIDO, PRODUTO, COR_PRODUTO) AS ITENS
					ON ITENS.PEDIDO = VENDAS_PRODUTO.PEDIDO AND ITENS.PRODUTO = VENDAS_PRODUTO.PRODUTO AND ITENS.COR_PRODUTO = VENDAS_PRODUTO.COR_PRODUTO
				INNER JOIN CLIENTES_ATACADO (NOLOCK)
					ON CLIENTES_ATACADO.CLIENTE_ATACADO = VENDAS.CLIENTE_ATACADO
				INNER JOIN W_SS_GRADE_PRODUTO (NOLOCK)
					ON W_SS_GRADE_PRODUTO.PRODUTO = VENDAS_PRODUTO.PRODUTO 
				INNER JOIN PRODUTOS (NOLOCK)
					ON PRODUTOS.PRODUTO = VENDAS_PRODUTO.PRODUTO 
				INNER JOIN COND_ATAC_PGTOS (NOLOCK)
					ON COND_ATAC_PGTOS.CONDICAO_PGTO = VENDAS.CONDICAO_PGTO
				LEFT JOIN PRODUTOS_BARRA_LICENCIADOS (NOLOCK)  
					ON PRODUTOS_BARRA_LICENCIADOS.GRIFFE = PRODUTOS.GRIFFE AND PRODUTOS_BARRA_LICENCIADOS.PRODUTO = VENDAS_PRODUTO.PRODUTO AND PRODUTOS_BARRA_LICENCIADOS.COR_PRODUTO = VENDAS_PRODUTO.COR_PRODUTO AND PRODUTOS_BARRA_LICENCIADOS.TAMANHO = W_SS_GRADE_PRODUTO.GRADE
				LEFT JOIN FILIAIS (NOLOCK)
					ON FILIAIS.FILIAL = VENDAS.FILIAL
				left JOIN PROP_REPRESENTANTES
					ON VENDAS.REPRESENTANTE=PROP_REPRESENTANTES.REPRESENTANTE
				left join REPRESENTANTES
					ON REPRESENTANTES.REPRESENTANTE=VENDAS.REPRESENTANTE
				WHERE CASE W_SS_GRADE_PRODUTO.TAMANHO 
							WHEN 1 THEN ISNULL(VENDAS_PRODUTO.VE1, 0) WHEN 2 THEN ISNULL(VENDAS_PRODUTO.VE2, 0) WHEN 3 THEN ISNULL(VENDAS_PRODUTO.VE3, 0)
							WHEN 4 THEN ISNULL(VENDAS_PRODUTO.VE4, 0) WHEN 5 THEN ISNULL(VENDAS_PRODUTO.VE5, 0) WHEN 6 THEN ISNULL(VENDAS_PRODUTO.VE6, 0)
							WHEN 7 THEN ISNULL(VENDAS_PRODUTO.VE7, 0) WHEN 8 THEN ISNULL(VENDAS_PRODUTO.VE8, 0) WHEN 9 THEN ISNULL(VENDAS_PRODUTO.VE9, 0) 
							WHEN 10 THEN ISNULL(VENDAS_PRODUTO.VE10, 0) WHEN 11 THEN ISNULL(VENDAS_PRODUTO.VE11, 0) WHEN 12 THEN ISNULL(VENDAS_PRODUTO.VE12, 0) 
							WHEN 13 THEN ISNULL(VENDAS_PRODUTO.VE13, 0) WHEN 14 THEN ISNULL(VENDAS_PRODUTO.VE14, 0) WHEN 15 THEN ISNULL(VENDAS_PRODUTO.VE15, 0) 
							WHEN 16 THEN ISNULL(VENDAS_PRODUTO.VE16, 0) WHEN 17 THEN ISNULL(VENDAS_PRODUTO.VE17, 0) WHEN 18 THEN ISNULL(VENDAS_PRODUTO.VE18, 0) 
							WHEN 19 THEN ISNULL(VENDAS_PRODUTO.VE19, 0) WHEN 20 THEN ISNULL(VENDAS_PRODUTO.VE20, 0) WHEN 21 THEN ISNULL(VENDAS_PRODUTO.VE21, 0) 
							WHEN 22 THEN ISNULL(VENDAS_PRODUTO.VE22, 0) WHEN 23 THEN ISNULL(VENDAS_PRODUTO.VE23, 0) WHEN 24 THEN ISNULL(VENDAS_PRODUTO.VE24, 0) 
							WHEN 25 THEN ISNULL(VENDAS_PRODUTO.VE25, 0) WHEN 26 THEN ISNULL(VENDAS_PRODUTO.VE26, 0) WHEN 27 THEN ISNULL(VENDAS_PRODUTO.VE27, 0) 
							WHEN 28 THEN ISNULL(VENDAS_PRODUTO.VE28, 0) WHEN 29 THEN ISNULL(VENDAS_PRODUTO.VE29, 0) WHEN 30 THEN ISNULL(VENDAS_PRODUTO.VE30, 0) 
							WHEN 31 THEN ISNULL(VENDAS_PRODUTO.VE31, 0) WHEN 32 THEN ISNULL(VENDAS_PRODUTO.VE32, 0) WHEN 33 THEN ISNULL(VENDAS_PRODUTO.VE33, 0) 
							WHEN 34 THEN ISNULL(VENDAS_PRODUTO.VE34, 0) WHEN 35 THEN ISNULL(VENDAS_PRODUTO.VE35, 0) WHEN 36 THEN ISNULL(VENDAS_PRODUTO.VE36, 0) 
							WHEN 37 THEN ISNULL(VENDAS_PRODUTO.VE37, 0) WHEN 38 THEN ISNULL(VENDAS_PRODUTO.VE38, 0) WHEN 39 THEN ISNULL(VENDAS_PRODUTO.VE39, 0) 
							WHEN 40 THEN ISNULL(VENDAS_PRODUTO.VE40, 0) WHEN 41 THEN ISNULL(VENDAS_PRODUTO.VE41, 0) WHEN 42 THEN ISNULL(VENDAS_PRODUTO.VE42, 0) 
							WHEN 43 THEN ISNULL(VENDAS_PRODUTO.VE43, 0) WHEN 44 THEN ISNULL(VENDAS_PRODUTO.VE44, 0) WHEN 45 THEN ISNULL(VENDAS_PRODUTO.VE45, 0) 
							WHEN 46 THEN ISNULL(VENDAS_PRODUTO.VE46, 0) WHEN 47 THEN ISNULL(VENDAS_PRODUTO.VE47, 0) WHEN 48 THEN ISNULL(VENDAS_PRODUTO.VE48, 0) 
						END > 0
					AND VENDAS.PEDIDO = ?V_VENDAS_00.pedido
					AND PROP_REPRESENTANTES.PROPRIEDADE = '00470'
					ORDER BY VENDAS.PEDIDO, VENDAS_PRODUTO.PRODUTO, VENDAS_PRODUTO.COR_PRODUTO, W_SS_GRADE_PRODUTO.TAMANHO  
		ENDTEXT 
		
		intRegistro = RECNO('V_VENDAS_00')
		SELECT V_VENDAS_00
		GO TOP
		SCAN FOR tot_qtde_entregar > 0 
			F_WAIT('Exportando pedidos. Aguarde...')
			IF !f_select(strSql, 'curArquivo')
				f_wait()
				MESSAGEBOX('Erro ao consultar dados do pedido, tente novamente.', 16, 'ERRO EXPORTANDO PEDIDOS')
				RETURN .F.
			ENDIF
			
			* Valida se algum item não tem código de barras do licenciado cadastrado
			strProdutoSemBarra = ''
			
			SELECT curArquivo 
			GO TOP
			bitPedidoJaExportado = NVL(curArquivo.PEDIDO_EXPORTADO_FORNECEDOR, .f.)
			SCAN FOR EMPTY(NVL(curArquivo.CODIGO_BARRAS_LICENCIADO, ''))
				strProdutoSemBarra = strProdutoSemBarra + 'Produto: ' + ALLTRIM(curArquivo.produto) + ' Cor: ' + + ALLTRIM(curArquivo.cor_produto) + ' Tamanho: ' + ALLTRIM(curArquivo.Tamanho) + CHR(10)
			ENDSCAN
			
			IF !f_vazio(strProdutoSemBarra)
				F_WAIT()
				MESSAGEBOX('O pedido: ' + ALLTRIM(V_VENDAS_00.pedido) + ' não será exportado porque o(s) SKU(s) abaixo não tem código de barras do fornecedor cadastrado:' + CHR(10) + CHR(10) + strProdutoSemBarra, 48 + 0, 'EXPORTAÇÃO PEDIDO')
				LOOP 
			ENDIF
			
			* Guarda Pedidos já exportados para avisar o usuário no final
			IF bitPedidoJaExportado
				strPedidosJaExportados = strPedidosJaExportados + ALLTRIM(V_VENDAS_00.pedido) + ', '
			ENDIF
			
			intArquivo = FCREATE(addbs(strDiretório) + ALLTRIM(V_VENDAS_00.pedido) + '_' + ALLTRIM(V_VENDAS_00.CLIENTE_ATACADO) + '.TXT')
			
			IF intArquivo < 0 
				f_wait()
				MESSAGEBOX('Erro ao criar arquivo para o pedido: ' + ALLTRIM(V_VENDAS_00.pedido) + '. Tente novamente')
				RETURN .f.
			ENDIF
			
			SELECT curArquivo
			GO TOP 
			SCAN 
				IF FWRITE(intArquivo, curArquivo.LINHA_ARQUIVO + chr(13) + CHR(10)) <= 0
					f_wait()
					MESSAGEBOX('Erro ao criar arquivo para o pedido: ' + ALLTRIM(V_VENDAS_00.pedido) + '. Tente novamente')
					FCLOSE(intArquivo)
					RETURN .f.
				ENDIF
			ENDSCAN 

			FCLOSE(intArquivo)
			
			* Atualiza pedido como já exportado 
			IF !f_update("Update vendas set PEDIDO_EXPORTADO_FORNECEDOR = 1 where pedido = ?V_VENDAS_00.pedido")
				MESSAGEBOX('Erro ao atualizar o pedido: ' + ALLTRIM(V_VENDAS_00.pedido) + ' como já exportado, realize a exportação novamente desse pedido.', 48 + 0, "EXPORTAÇÃO PEDIDO")
			ENDIF
			
			SELECT V_VENDAS_00						
		ENDSCAN
		
		f_wait()
		MESSAGEBOX('Exportação finalizada!' + IIF(!F_VAZIO(strPedidosJaExportados), CHR(10) + CHR(10) + 'ATENÇÃO: Os seguintes pedidos já haviam sido exportados anteriormente:' + LEFT(strPedidosJaExportados, LEN(strPedidosJaExportados) -2), ''), 64 + 0, 'EXPORTAÇÃO PEDIDO')
		
		SELECT V_VENDAS_00
		GO intRegistro
	ENDPROC
ENDDEFINE
		
	